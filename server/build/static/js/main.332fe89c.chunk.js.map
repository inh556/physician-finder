{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","map","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","showMarker","setShowMarker","_useState5","lat","lng","_useState6","location","setLocation","_useState7","_useState8","address","setAddress","google","window","geocoder","maps","Geocoder","handleSubmit","event","preventDefault","middleName","name","trim","split","firstName","lastName","length","news_url","concat","request","Request","method","fetch","then","res","status","json","city","state","query","geocode","results","geometry","alert","codeAddress","adress","catch","err","console","log","getAddress","useEffect","Map","document","getElementById","zoom","center","Marker","position","react_default","a","createElement","className","class","onSubmit","e","type","onChange","target","id","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.332fe89c.chunk.js","sourcesContent":["import React, { useState, useEffect   } from 'react';\nimport './App.css';\n\nfunction App() {\n  // use hooks\n  const [value, setValue] = useState('');\n  // when app initialized, dont show marker,set showMarker to false\n  const [showMarker, setShowMarker] = useState(false);\n  // set initial coordinate in SF\n  const [location, setLocation] = useState({lat: 37.7749, lng: -122.4194});\n  // for demo\n  const [address, setAddress] = useState('Physician address will display here.')\n\n  // init google map\n  let google = window.google;\n  let geocoder = new google.maps.Geocoder();\n  let map;\n\n  // when user submit form, call \n  const handleSubmit = function(event) {\n    event.preventDefault();\n    setShowMarker(true)\n    getAddress();\n  } \n\n  // add from database\n  function getAddress() {\n\n    // trim and split user input\n    const name = value.trim().split(' ');\n\n    // first assume input contains first name and last name\n    const firstName = name[0];\n    let middleName;\n    const lastName = name[name.length -1];\n\n    // if input has middle, set the value to middlename\n    if(name.length === 3) {\n      middleName = name[1]\n    }\n\n    // put parameters in url, carring them to sever side\n    const news_url = `/v1/physician/${firstName}/${middleName}/${lastName}`\n    const request = new Request(news_url, {\n      method: 'GET',\n    });\n    fetch(request)\n      .then(res => {\n        // if not found will return 400 code\n        if(res.status === 400) {\n          setAddress('No results matches your research');\n          throw 400;\n        } else {\n          // if found, json()\n          return res.json();\n        }\n      })\n      .then(res => {\n        // call codeAddress to get coordinate\n        codeAddress(res.adress, res.city, res.state)\n        setAddress(`${value}'s address is ${res.adress}, ${res.city}, ${res.state}`)\n      })\n      .catch(err => console.log(err))\n  }\n\n  // get coordinate with address \n  function codeAddress(address, city, state) {\n    const query = `${address} ${city} ${state}`\n    geocoder.geocode( { 'address': query}, function(results, status) {\n      if (status === 'OK') {\n        setLocation(results[0].geometry.location)\n      } else {\n        alert('Geocode was not successful for the following reason: ' + status);\n      }\n    });\n  }\n\n  // update map when coordinate changed, and drop a new mark \n  useEffect(() => {\n    map = new google.maps.Map(\n      document.getElementById('map'), {zoom: 11, center: location});\n    const marker = showMarker && new google.maps.Marker({position: location, map: map});\n  }, [location]);\n\n  return (\n    <div className=\"App\">\n      <form class=\"form\" onSubmit={(e) => handleSubmit(e)}>\n        <label>\n          Name\n          <input className=\"inputText\" type=\"text\" value={value} onChange={(e) => setValue(e.target.value)}/>\n        </label>\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n      <div id=\"demoAddress\">{address}</div>\n      <div id=\"map\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}